fifth update

feat: Implement extensive UI enhancements and display existing backend data

This commit introduces a series of UI updates to `main.rs` to better reflect the game's backend state and provide more interactivity, based on Phases 1 and 2 of the 'Nexus Core: Colony Manager' roadmap.

Changes include:
- Displayed Colony Happiness score in the top UI bar.
- Added UI buttons and interaction logic for:
    - Constructing and upgrading the Administrative Spire.
    - Building tiered Habitation Structures (Basic Dwellings, Community Blocks, Arcology Spires).
    - Constructing initial tier Service Buildings (Clinic, Security Post).
    - Developing initial tier Zones (Market Stalls, Workshops).
- Implemented hover-over information: Construction costs, upkeep (where applicable), and technology prerequisites are now displayed in the message log when hovering over the new construction buttons.
- Added a research button for 'EfficientExtraction'.
- Refined UI clarity by removing older, redundant build buttons for dwellings and some service buildings.

**Known Issue & Next Steps:**
A runtime panic occurs due to conflicting system parameters in `admin_spire_button_system`.
  - **Error:** `Query<..., With<nexus::UpgradeSpireButton>> ... accesses component(s) bevy_ui::ui_node::BackgroundColor in a way that conflicts with a previous system parameter.`
  - **Location:** `admin_spire_button_system` in `src/main.rs`.
  - **Likely Cause:** The two `Query` instances for `ConstructSpireButton` and `UpgradeSpireButton` both attempt to access `BackgroundColor` mutably.
  - **Recommended Fix:** Refactor `admin_spire_button_system` to use a `ParamSet` for the two queries to resolve the conflict. Example:
    ```rust
    fn admin_spire_button_system(
        mut button_queries: ParamSet<(
            Query<(&Interaction, &mut BackgroundColor), (Changed<Interaction>, With<ConstructSpireButton>)>,
            Query<(&Interaction, &mut BackgroundColor), (Changed<Interaction>, With<UpgradeSpireButton>)>,
        )>,
        mut game_state: ResMut<GameState>,
        mut log: ResMut<MessageLog>,
    ) {
        // Access construct query with button_queries.p0()
        // Access upgrade query with button_queries.p1()
    }
    ```
This fix should be applied in the subsequent commit to ensure system stability.

Fourth Update

Fix: Resolve compilation errors and warnings

This commit addresses several compilation issues:

- Fixed `upgraded` variable scope error (E0425) in the `upgrade_zone` function by initializing the variable at the beginning of the function.
- Derived the `Clone` trait for `ProcessingPlantTier`, `FabricatorTier`, `HabitationStructureTier`, `ServiceBuildingTier`, and `ZoneTier` structs to resolve trait bounds errors (E0599) during vector cloning.
- Removed the unused `dwellings` variable from the `update_colony_stats_system` function to eliminate an unused variable warning.

The project now compiles successfully with `cargo check`.



third update

fix: Resolve compilation errors in game_state.rs

This commit addresses a series of compilation errors and warnings
in `src/game_state.rs` that arose from previous integrations and
refactorings.

Key fixes include:
- E0425 (Scope Error): `update_colony_stats_system` now correctly
  takes `Res<GameState>` as a parameter.
- E0063 (Missing Fields): Initializers for `ProcessingPlantTier`
  in `get_processing_plant_tiers` now include
  `construction_credits_cost` and `upkeep_cost` fields.
- E0433 (Rand Crate): `generate_unique_id` was modified to use a
  static atomic counter, removing the direct dependency on the
  `rand` crate for this function.
- E0505 (Move/Borrow Conflicts): Assignments to `available_tiers`
  in `add_...` functions (e.g., `add_fabricator`) now use
  `.clone()` to prevent moving borrowed data.
- E0502 (Borrow Conflict): `check_fabricator_inputs` was refactored
  to accept `current_resources` and `fabricator_tier` directly,
  resolving a mutable/immutable borrow conflict in
  `fabricator_production_system`.
- E0499 (Mutable Borrow Conflicts): Calls to `update_civic_index`
  and `update_total_specialist_slots` within `upgrade_service_building`
  and `upgrade_zone` were deferred until after the primary mutable
  borrow was released.
- Warnings: Addressed warnings for unused assignments and variables in
  `remove_habitation_structure` and `game_tick_system`.

These changes should allow your project to compile successfully and
stabilize the core game state logic.


Second Update

feat: Implement Phase 2 backend systems and integrate Phase 1 updates

This commit brings together several key backend features for Phase 2
of development, alongside integrating and building upon recently
clarified Phase 1 completions.

Key changes include:

Framework from original plan steps:
- Administrative Spire: Tiered upgrades, development phase unlocking,
  power and resource linkage.
- Habitation & Population: Housing structures, inhabitant growth
  (placeholder logic), specialist slots.
- Civic Services & Zones: Service buildings (Wellness, Security, etc.)
  and Zones (Commercial, Light Industry) with specialist needs and
  civic index contributions.
- Happiness System: Colony-wide happiness calculated from food (simulated),
  service coverage, housing, employment, civic index, and legacy bonuses
  (placeholder).

Economic Model (integrated from Phase 2 roadmap & agent work):
- Credits System: Introduced "Credits" as a primary currency.
  Construction, upgrade, and technology research now have Credit costs.
- Upkeep: Service buildings, zones, fabricators, and processing plants
  now have upkeep costs in Credits. A system handles periodic deduction
  and deactivation of buildings if upkeep cannot be met.
- Income: Commercial zones generate Credit income. Placeholder for
  legacy structure income.

Fabricators & Processing Plants (building on your Phase 1 work):
- Construction calls for Fabricators and Processing Plants are now
  correctly linked from the UI build buttons to game state logic.
- These building types were already functional regarding production,
  power, and resource processing as per your earlier Phase 1 work.

Technology:
- Technology research costs are now denominated in Credits.

Power System (from your Phase 1 work):
- Power is a stored resource, generated by Power Relays and consumed
  by various buildings including Fabricators and Processing Plants.
- GameState now tracks total generated and consumed power, intended for
  future UI accuracy.

Note on UI:
Due to limitations I encountered during development, UI updates in
`main.rs` to fully display the new Credit economy, all new resources,
and precise power metrics have been deferred. The backend systems are
in place, but frontend representation is pending.


first update

feat: Implement Phase 1 foundational elements

This commit introduces several key features and changes based on Phase 1 of the game roadmap:

- **Resource Expansion:**
    - I've added `Power` as a stored resource, tracked in `GameState`.
    - I've also added `CuprumDeposits` as a new gatherable resource.
    - The initial values for these resources are set in `GameState::default()`.

- **Power Management System:**
    - The `game_tick_system` now manages power generation (from PowerRelays) and consumption (from Extractors, BioDomes, ResearchInstitutes, and Fabricators).
    - Net power is calculated, and stored `Power` is consumed if generation is insufficient.
    - Buildings requiring power (Extractors, BioDomes, Fabricators) will only function if sufficient power (generated or stored) is available.

- **Building Component Refinements & Additions:**
    - The `Extractor` and `BioDome` components now use `power_consumption` (which I've renamed from `power_required`).
    - The `ResearchInstitute` component now includes `power_consumption`.
    - I've defined new building components:
        - `Fabricator`: Includes `power_consumption`, input/output resource types and amounts, and a `conversion_rate`.
        - `ProcessingPlant`: Includes `power_consumption` (further functionality will be defined later).
    - The `BuildingType` enum has been updated with `Fabricator` and `ProcessingPlant`.
    - Default construction costs for new buildings have been added to `GameState::default()`.

- **Technology Expansion:**
    - The `Tech` enum has been expanded with `EfficientExtraction`.
    - The cost for `EfficientExtraction` has been added to `GameState::default()`.

- **Fabricator Logic (Basic):**
    - The `game_tick_system` now includes basic logic for `Fabricators`:
        - They consume power.
        - If powered and input resources are available, they consume inputs and produce outputs.
        - Output production respects overall storage capacity.

- **`main.rs` Updates:**
    - I've corrected entity spawning to use `power_consumption` for relevant buildings (BioDome, Extractor, ResearchInstitute).
    - I've updated the power display logic in `update_text_display` to show stored `Power` and a net generation/consumption figure, reflecting the new power system. It also correctly sums power consumption from existing buildings.
    - I've added placeholder TODO comments for future UI elements (new resources, buildings, techs) and entity spawning logic for new buildings.
	
	